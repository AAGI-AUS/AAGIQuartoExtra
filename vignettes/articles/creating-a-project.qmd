---
title: "Creating a project with AAGIQuartoExtra"
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

## Introduction

This article provides a comprehensive guide on using the functions in the AAGIQuartoExtra package to create a structured project, manage folder organization, and work with Quarto documents effectively. There are five important steps we want to cover:

1. Create a new project.
2. Set up a structured folder hierarchy using `setup_folders()`.
3. Manage and organize Quarto reporting documents in the project with `setup_docs()`.
4. Use `download_fonts()` to obtain the Proxima Nova font and understand fallback mechanisms.
5. Set up Git and GitHub for version control.

## 1. Creating a New Project

To begin, you can create a new Quarto project using your preferred method (e.g., RStudio or Quarto CLI). After initializing your project, ensure you have your working directory set to the project folder. You can verify this using:

```{r}
getwd()
```

## 2. Setting Up a Folder Structure

Once your project is ready, use the `setup_folders()` function to create a standardized folder hierarchy. This function organizes your project with the following folders:

- **data**: Contains raw data files used in the project (read-only).
- **code**: Contains R scripts for analysis and preprocessing.
- **figs**: Stores generated plots, tables, or figures.
- **doc**: Contains reports, manuscripts, or interim summaries.
- **output**: Holds processed data or logs created by scripts.
- **src**: Optional folder for sourced scripts (e.g., helper functions).
- **admin**: For administrative files like project timelines or meeting notes.

We will first load the package as usual using `library()` within the new project.

```{r}
#| label: setup
library(AAGIQuartoExtra)
```

To set up the proposed structure, run:

```{r}
setup_folders()
```

This function will create the directories in your project root. 

## 3. Managing Quarto Documents

The `setup_docs()` function helps organize your Quarto documents by renaming and updating their configuration. For instance, if your project is named `res_HierarchicalBayesian`, running the function will:

- Rename `index.qmd` to `01_HierarchicalBayesian_Report.qmd`.
- Add the following entry to the `_quarto.yml` file:

```{yaml}
project:
  title: "res_HierarchicalBayesian"
  output-dir: doc
  render:
    - 01_HierarchicalBayesian_Report.qmd
```

To use this function, simply run:

```{r}
setup_docs()
```

You can follow a naming convention for additional documents:

- `02_HierarchicalBayesian_Manuscript.qmd`
- `03_HierarchicalBayesian_ConferencePaper.qmd`
- `04_HierarchicalBayesian_Slides.qmd`

This numbering system ensures clarity and logical ordering.

## 4. Working with Fonts

### Checking for Proxima Nova

The template uses the Proxima Nova font if available. To check if this font is installed, use:

```{r}
check_proxima_nova_installed()
```

If the font is not installed, the package falls back to Arial.

### Downloading Proxima Nova Fonts

If you have access to the Proxima Nova font files, use the `download_fonts()` function to retrieve and configure them. This function:

1. Downloads the required `.otf` font files from a private GitHub repository.
2. Extracts the files into the `_extensions/aagi/fonts/` directory within your project.
3. Automatically calls `setup_github_pat()` to ensure you have the correct permissions to download from the repository.

Run the following command to download the fonts:

```{r}
download_fonts()
```

If the fonts are downloaded successfully, the template will use Proxima Nova. If the download fails or the font is unavailable, Arial will be used as the fallback.

## 5. Setting Up Git and GitHub for Version Control

Version control is essential for managing changes and collaborating effectively. You can set up Git and GitHub for your project using the `usethis` package. To configure Git for your project:

1. Open your R session and navigate to your project directory.
2. Run the following commands:

```{r}
usethis::use_git()
```

This initializes a Git repository in your project directory.

To connect your project to a private GitHub repository:

```r
usethis::use_github(private = TRUE)
```

This creates a new private repository on GitHub and links it to your local project. For detailed steps, refer to the [Happy Git with R guide](https://happygitwithr.com/existing-github-last.html).

## Summary

This vignette has shown you how to:

1. Create and structure a new project using `setup_folders()`.
2. Organize and manage your Quarto documents with `setup_docs()`.
3. Configure fonts using `download_fonts()` and handle fallback options.
4. Set up Git and GitHub for version control.

For more details, consult the package documentation or visit the [GitHub Page](#).
